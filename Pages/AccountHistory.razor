@page "/accounts/{AccountId}/history"
@using PersonalFinanceApp.Models.DTOs
@using PersonalFinanceApp.Services
@inject IAccountService AccountService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Historique - Personal Finance App</PageTitle>

@if (isLoading)
{
    <div class="flex justify-center items-center py-12">
        <div class="loading-spinner"></div>
        <span class="ml-2 text-gray-600">Chargement de l'historique...</span>
    </div>
}
else if (account == null)
{
    <div class="text-center py-12">
        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <h3 class="mt-2 text-sm font-medium text-gray-900">Compte non trouvé</h3>
        <p class="mt-1 text-sm text-gray-500">Le compte demandé n'existe pas ou vous n'y avez pas accès.</p>
        <div class="mt-6">
            <button type="button" @onclick="() => NavigationManager.NavigateTo(\"/accounts\")" 
                    class="btn-primary">
                Retour aux comptes
            </button>
        </div>
    </div>
}
else
{
    <div class="space-y-6">
        <!-- Header -->
        <div>
            <nav class="flex" aria-label="Breadcrumb">
                <ol class="flex items-center space-x-4">
                    <li>
                        <div>
                            <a href="/accounts" class="text-gray-400 hover:text-gray-500">
                                <svg class="flex-shrink-0 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                </svg>
                                <span class="sr-only">Comptes</span>
                            </a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <a href="/accounts" class="ml-4 text-sm font-medium text-gray-500 hover:text-gray-700">
                                Comptes
                            </a>
                        </div>
                    </li>
                    <li>
                        <div class="flex items-center">
                            <svg class="flex-shrink-0 h-5 w-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                            </svg>
                            <span class="ml-4 text-sm font-medium text-gray-500">@account.Name</span>
                        </div>
                    </li>
                </ol>
            </nav>
            
            <div class="mt-4 md:flex md:items-center md:justify-between">
                <div class="flex-1 min-w-0">
                    <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
                        Historique - @account.Name
                    </h2>
                    <p class="mt-1 text-sm text-gray-500">
                        @GetAccountTypeName(account.Type) • Solde actuel: 
                        <span class="@GetBalanceClass(account.CurrentBalance)">
                            @FormatCurrency(account.CurrentBalance)
                        </span>
                    </p>
                </div>
                <div class="mt-4 flex md:mt-0 md:ml-4">
                    <button type="button" @onclick="UpdateBalance" 
                            class="btn-primary">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Mettre à jour
                    </button>
                </div>
            </div>
        </div>

        <!-- Account Summary -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3">
            <div class="card">
                <div class="card-body">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-primary-100 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-primary-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Solde actuel</dt>
                                <dd class="text-lg font-medium @GetBalanceClass(account.CurrentBalance)">
                                    @FormatCurrency(account.CurrentBalance)
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Solde initial</dt>
                                <dd class="text-lg font-medium text-gray-900">
                                    @FormatCurrency(account.InitialBalance)
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <div class="flex items-center">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 bg-success-100 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-success-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                </svg>
                            </div>
                        </div>
                        <div class="ml-5 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Évolution</dt>
                                <dd class="text-lg font-medium @GetBalanceClass(account.CurrentBalance - account.InitialBalance)">
                                    @FormatCurrency(account.CurrentBalance - account.InitialBalance)
                                </dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- History Timeline -->
        <div class="card">
            <div class="card-header">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Historique des modifications</h3>
                <p class="mt-1 text-sm text-gray-500">Chronologie des changements de solde</p>
            </div>
            <div class="card-body">
                @if (balanceHistory.Any())
                {
                    <div class="flow-root">
                        <ul class="-mb-8">
                            @foreach (var (history, index) in balanceHistory.Select((h, i) => (h, i)))
                            {
                                <li>
                                    <div class="relative pb-8">
                                        @if (index != balanceHistory.Count - 1)
                                        {
                                            <span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>
                                        }
                                        <div class="relative flex space-x-3">
                                            <div>
                                                <span class="h-8 w-8 rounded-full @GetHistoryIconClass(history.Difference) flex items-center justify-center ring-8 ring-white">
                                                    @if (history.Difference > 0)
                                                    {
                                                        <svg class="w-4 h-4 text-success-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
                                                        </svg>
                                                    }
                                                    else if (history.Difference < 0)
                                                    {
                                                        <svg class="w-4 h-4 text-danger-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
                                                        </svg>
                                                    }
                                                    else
                                                    {
                                                        <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
                                                        </svg>
                                                    }
                                                </span>
                                            </div>
                                            <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                                                <div>
                                                    <p class="text-sm text-gray-500">
                                                        Solde mis à jour le 
                                                        <time datetime="@history.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ssZ")">
                                                            @FormatDateTime(history.CreatedAt)
                                                        </time>
                                                    </p>
                                                    @if (!string.IsNullOrEmpty(history.Notes))
                                                    {
                                                        <p class="text-sm text-gray-900 mt-1">@history.Notes</p>
                                                    }
                                                </div>
                                                <div class="text-right text-sm whitespace-nowrap">
                                                    <p class="@GetBalanceClass(history.Balance) font-medium">
                                                        @FormatCurrency(history.Balance)
                                                    </p>
                                                    <p class="@GetBalanceClass(history.Difference)">
                                                        @(history.Difference > 0 ? "+" : "")@FormatCurrency(history.Difference)
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }
                else
                {
                    <div class="text-center py-6">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun historique</h3>
                        <p class="mt-1 text-sm text-gray-500">Aucune modification n'a encore été enregistrée pour ce compte.</p>
                    </div>
                }
            </div>
        </div>
    </div>
}

<!-- Update Balance Modal -->
@if (showBalanceModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="CloseBalanceModal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">
                    Mettre à jour le solde - @account?.Name
                </h3>
                
                <EditForm Model="balanceUpdate" OnValidSubmit="SaveBalanceUpdate">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <div>
                            <label class="form-label">Solde actuel</label>
                            <p class="text-lg font-semibold @GetBalanceClass(account?.CurrentBalance ?? 0)">
                                @FormatCurrency(account?.CurrentBalance ?? 0)
                            </p>
                        </div>
                        
                        <div>
                            <label class="form-label">Nouveau solde</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span class="text-gray-500 sm:text-sm">€</span>
                                </div>
                                <InputNumber @bind-Value="balanceUpdate.NewBalance" 
                                           class="form-input pl-7" 
                                           placeholder="0.00" />
                            </div>
                            <ValidationMessage For="@(() => balanceUpdate.NewBalance)" class="form-error" />
                        </div>
                        
                        <div>
                            <label class="form-label">Notes (optionnel)</label>
                            <InputTextArea @bind-Value="balanceUpdate.Notes" class="form-input" rows="3" placeholder="Raison de la mise à jour..." />
                        </div>
                    </div>
                    
                    <div class="flex justify-end space-x-3 mt-6">
                        <button type="button" @onclick="CloseBalanceModal" class="btn-secondary">
                            Annuler
                        </button>
                        <button type="submit" disabled="@isSaving" class="btn-primary">
                            @if (isSaving)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Mise à jour...</span>
                            }
                            else
                            {
                                <span>Mettre à jour</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int AccountId { get; set; }
    
    private AccountDto? account;
    private List<BalanceHistoryDto> balanceHistory = new();
    private UpdateBalanceDto balanceUpdate = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool showBalanceModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccountHistory();
    }

    private async Task LoadAccountHistory()
    {
        try
        {
            isLoading = true;
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load account details
            account = await AccountService.GetAccountByIdAsync(AccountId, currentUser.Id);
            if (account == null)
            {
                isLoading = false;
                return;
            }

            // Load balance history
            balanceHistory = (await AccountService.GetAccountBalanceHistoryAsync(AccountId, currentUser.Id)).ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors du chargement: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateBalance()
    {
        if (account == null) return;
        
        balanceUpdate = new UpdateBalanceDto
        {
            NewBalance = account.CurrentBalance
        };
        showBalanceModal = true;
    }

    private void CloseBalanceModal()
    {
        showBalanceModal = false;
        balanceUpdate = new();
    }

    private async Task SaveBalanceUpdate()
    {
        try
        {
            isSaving = true;
            var currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser == null || account == null) return;

            await AccountService.UpdateBalanceAsync(account.Id, balanceUpdate, currentUser.Id);
            ToastService.ShowSuccess("Solde mis à jour avec succès");
            CloseBalanceModal();
            await LoadAccountHistory();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la mise à jour: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private string FormatCurrency(decimal amount)
    {
        return amount.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"));
    }

    private string FormatDateTime(DateTime dateTime)
    {
        return dateTime.ToString("dd/MM/yyyy à HH:mm");
    }

    private string GetBalanceClass(decimal balance)
    {
        if (balance > 0) return "balance-positive";
        if (balance < 0) return "balance-negative";
        return "balance-neutral";
    }

    private string GetAccountTypeName(AccountType type)
    {
        return type switch
        {
            AccountType.Checking => "Compte courant",
            AccountType.Savings => "Épargne",
            AccountType.Credit => "Crédit",
            AccountType.Investment => "Investissement",
            AccountType.Cash => "Espèces",
            _ => "Autre"
        };
    }

    private string GetHistoryIconClass(decimal difference)
    {
        if (difference > 0) return "bg-success-100";
        if (difference < 0) return "bg-danger-100";
        return "bg-gray-100";
    }
}