@page "/register"
@using PersonalFinanceApp.Models.DTOs
@using PersonalFinanceApp.Services
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Inscription - Personal Finance App</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div>
            <div class="mx-auto h-12 w-12 flex items-center justify-center bg-primary-600 rounded-lg">
                <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                </svg>
            </div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Créer un nouveau compte
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Ou
                <a href="/login" class="font-medium text-primary-600 hover:text-primary-500">
                    connectez-vous à votre compte existant
                </a>
            </p>
        </div>
        
        <form class="mt-8 space-y-6" @onsubmit="HandleRegister" @onsubmit:preventDefault="true">
            <div class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="firstName" class="form-label">Prénom</label>
                        <input id="firstName"
                               name="firstName"
                               type="text"
                               autocomplete="given-name"
                               required
                               @bind="registerDto.FirstName"
                               class="form-input"
                               placeholder="Prénom" />
                        <ValidationMessage For="@(() => registerDto.FirstName)" class="form-error" />
                    </div>
                    
                    <div>
                        <label for="lastName" class="form-label">Nom</label>
                        <input id="lastName"
                               name="lastName"
                               type="text"
                               autocomplete="family-name"
                               required
                               @bind="registerDto.LastName"
                               class="form-input"
                               placeholder="Nom" />
                        <ValidationMessage For="@(() => registerDto.LastName)" class="form-error" />
                    </div>
                </div>
                
                <div>
                    <label for="email" class="form-label">Adresse e-mail</label>
                    <input id="email"
                           name="email"
                           type="email"
                           autocomplete="email"
                           required
                           @bind="registerDto.Email"
                           class="form-input"
                           placeholder="votre@email.com" />
                    <ValidationMessage For="@(() => registerDto.Email)" class="form-error" />
                </div>
                
                <div>
                    <label for="password" class="form-label">Mot de passe</label>
                    <input id="password"
                           name="password"
                           type="password"
                           autocomplete="new-password"
                           required
                           @bind="registerDto.Password"
                           class="form-input"
                           placeholder="Mot de passe" />
                    <ValidationMessage For="@(() => registerDto.Password)" class="form-error" />
                    <div class="mt-1 text-sm text-gray-500">
                        Le mot de passe doit contenir au moins 8 caractères, une majuscule, une minuscule et un chiffre.
                    </div>
                </div>
                
                <div>
                    <label for="confirmPassword" class="form-label">Confirmer le mot de passe</label>
                    <input id="confirmPassword"
                           name="confirmPassword"
                           type="password"
                           autocomplete="new-password"
                           required
                           @bind="registerDto.ConfirmPassword"
                           class="form-input"
                           placeholder="Confirmer le mot de passe" />
                    <ValidationMessage For="@(() => registerDto.ConfirmPassword)" class="form-error" />
                </div>
            </div>

            <div class="flex items-center">
                <input id="terms"
                       name="terms"
                       type="checkbox"
                       required
                       @bind="acceptTerms"
                       class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" />
                <label for="terms" class="ml-2 block text-sm text-gray-900">
                    J'accepte les
                    <a href="/terms" class="text-primary-600 hover:text-primary-500">conditions d'utilisation</a>
                    et la
                    <a href="/privacy" class="text-primary-600 hover:text-primary-500">politique de confidentialité</a>
                </label>
            </div>

            <div>
                <button type="submit"
                        disabled="@(isLoading || !acceptTerms)"
                        class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isLoading)
                    {
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Création du compte...</span>
                    }
                    else
                    {
                        <span>Créer mon compte</span>
                    }
                </button>
            </div>

            <div class="mt-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300" />
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-gray-50 text-gray-500">Sécurité</span>
                    </div>
                </div>
                
                <div class="mt-4 text-center text-sm text-gray-600">
                    <p>Vos données sont protégées par un chiffrement de niveau bancaire.</p>
                </div>
            </div>
        </form>
    </div>
</div>

@code {
    private RegisterDto registerDto = new();
    private bool acceptTerms = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        if (await UserService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private async Task HandleRegister()
    {
        if (!acceptTerms)
        {
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            var success = await UserService.RegisterAsync(registerDto);
            if (success)
            {
                NavigationManager.NavigateTo("/dashboard");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}