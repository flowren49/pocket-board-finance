@page "/settings"
@using PersonalFinanceApp.Models.DTOs
@using PersonalFinanceApp.Services
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Paramètres - Personal Finance App</PageTitle>

<div class="space-y-6">
    <!-- Header -->
    <div>
        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            Paramètres
        </h2>
        <p class="mt-1 text-sm text-gray-500">
            Gérez vos préférences et paramètres de compte
        </p>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Profile Settings -->
        <div class="lg:col-span-2">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Informations du profil</h3>
                    <p class="mt-1 text-sm text-gray-500">Modifiez vos informations personnelles</p>
                </div>
                <div class="card-body">
                    @if (currentUser != null)
                    {
                        <div class="space-y-6">
                            <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
                                <div>
                                    <label class="form-label">Prénom</label>
                                    <input type="text" value="@currentUser.FirstName" readonly 
                                           class="form-input bg-gray-50" />
                                </div>
                                <div>
                                    <label class="form-label">Nom</label>
                                    <input type="text" value="@currentUser.LastName" readonly 
                                           class="form-input bg-gray-50" />
                                </div>
                            </div>
                            
                            <div>
                                <label class="form-label">Adresse e-mail</label>
                                <input type="email" value="@currentUser.Email" readonly 
                                       class="form-input bg-gray-50" />
                            </div>
                            
                            <div>
                                <label class="form-label">Membre depuis</label>
                                <input type="text" value="@FormatDate(currentUser.CreatedAt)" readonly 
                                       class="form-input bg-gray-50" />
                            </div>
                            
                            <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-blue-800">Informations en lecture seule</h3>
                                        <div class="mt-2 text-sm text-blue-700">
                                            <p>Ces informations sont gérées par le système et ne peuvent pas être modifiées directement.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="space-y-6">
            <!-- Change Password -->
            <div class="card">
                <div class="card-header">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Sécurité</h3>
                </div>
                <div class="card-body">
                    <div class="space-y-4">
                        <button @onclick="ShowChangePasswordModal" 
                                class="w-full btn-secondary">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                            </svg>
                            Changer le mot de passe
                        </button>
                        
                        <button @onclick="ShowDeleteAccountModal" 
                                class="w-full btn-danger">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Supprimer le compte
                        </button>
                    </div>
                </div>
            </div>

            <!-- App Settings -->
            <div class="card">
                <div class="card-header">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Préférences</h3>
                </div>
                <div class="card-body">
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <div>
                                <label class="text-sm font-medium text-gray-900">Notifications</label>
                                <p class="text-sm text-gray-500">Recevoir des notifications</p>
                            </div>
                            <InputCheckbox @bind-Value="settings.EnableNotifications" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" />
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div>
                                <label class="text-sm font-medium text-gray-900">Thème sombre</label>
                                <p class="text-sm text-gray-500">Interface en mode sombre</p>
                            </div>
                            <InputCheckbox @bind-Value="settings.DarkMode" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" />
                        </div>
                        
                        <div class="flex items-center justify-between">
                            <div>
                                <label class="text-sm font-medium text-gray-900">Sauvegarde automatique</label>
                                <p class="text-sm text-gray-500">Sauvegarder les modifications</p>
                            </div>
                            <InputCheckbox @bind-Value="settings.AutoSave" class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" />
                        </div>
                    </div>
                    
                    <div class="mt-4 pt-4 border-t border-gray-200">
                        <button @onclick="SaveSettings" 
                                disabled="@isSaving"
                                class="w-full btn-primary">
                            @if (isSaving)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Enregistrement...</span>
                            }
                            else
                            {
                                <span>Enregistrer les préférences</span>
                            }
                        </button>
                    </div>
                </div>
            </div>

            <!-- App Info -->
            <div class="card">
                <div class="card-header">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Application</h3>
                </div>
                <div class="card-body">
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span class="text-gray-500">Version</span>
                            <span class="text-gray-900">1.0.0</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-500">Dernière mise à jour</span>
                            <span class="text-gray-900">@DateTime.Now.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-gray-500">Plateforme</span>
                            <span class="text-gray-900">Web PWA</span>
                        </div>
                    </div>
                    
                    <div class="mt-4 pt-4 border-t border-gray-200">
                        <button @onclick="CheckForUpdates" 
                                class="w-full btn-secondary">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                            Vérifier les mises à jour
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Change Password Modal -->
@if (showChangePasswordModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="CloseChangePasswordModal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Changer le mot de passe</h3>
                
                <EditForm Model="changePasswordDto" OnValidSubmit="ChangePassword">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-4">
                        <div>
                            <label class="form-label">Mot de passe actuel</label>
                            <InputText @bind-Value="changePasswordDto.CurrentPassword" type="password" class="form-input" />
                            <ValidationMessage For="@(() => changePasswordDto.CurrentPassword)" class="form-error" />
                        </div>
                        
                        <div>
                            <label class="form-label">Nouveau mot de passe</label>
                            <InputText @bind-Value="changePasswordDto.NewPassword" type="password" class="form-input" />
                            <ValidationMessage For="@(() => changePasswordDto.NewPassword)" class="form-error" />
                        </div>
                        
                        <div>
                            <label class="form-label">Confirmer le nouveau mot de passe</label>
                            <InputText @bind-Value="changePasswordDto.ConfirmNewPassword" type="password" class="form-input" />
                            <ValidationMessage For="@(() => changePasswordDto.ConfirmNewPassword)" class="form-error" />
                        </div>
                    </div>
                    
                    <div class="flex justify-end space-x-3 mt-6">
                        <button type="button" @onclick="CloseChangePasswordModal" class="btn-secondary">
                            Annuler
                        </button>
                        <button type="submit" disabled="@isChangingPassword" class="btn-primary">
                            @if (isChangingPassword)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Changement...</span>
                            }
                            else
                            {
                                <span>Changer</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Delete Account Modal -->
@if (showDeleteAccountModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="CloseDeleteAccountModal">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
            <div class="mt-3">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                    <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                </div>
                <div class="mt-3 text-center">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Supprimer le compte</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">
                            Cette action est irréversible. Toutes vos données seront supprimées définitivement.
                        </p>
                    </div>
                    <div class="mt-4">
                        <InputCheckbox @bind-Value="confirmDelete" class="h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded" />
                        <label class="ml-2 text-sm text-gray-900">Je comprends les conséquences</label>
                    </div>
                </div>
                <div class="mt-5 flex justify-center space-x-3">
                    <button @onclick="CloseDeleteAccountModal" class="btn-secondary">
                        Annuler
                    </button>
                    <button @onclick="DeleteAccount" 
                            disabled="@(!confirmDelete || isDeletingAccount)"
                            class="btn-danger">
                        @if (isDeletingAccount)
                        {
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Suppression...</span>
                        }
                        else
                        {
                            <span>Supprimer</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserDto? currentUser;
    private AppSettings settings = new();
    private ChangePasswordDto changePasswordDto = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private bool isChangingPassword = false;
    private bool isDeletingAccount = false;
    private bool showChangePasswordModal = false;
    private bool showDeleteAccountModal = false;
    private bool confirmDelete = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            isLoading = true;
            currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load settings from localStorage or default values
            settings = new AppSettings
            {
                EnableNotifications = true,
                DarkMode = false,
                AutoSave = true
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors du chargement: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            // Here you would typically save settings to localStorage or backend
            ToastService.ShowSuccess("Préférences enregistrées");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la sauvegarde: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ShowChangePasswordModal()
    {
        changePasswordDto = new();
        showChangePasswordModal = true;
    }

    private void CloseChangePasswordModal()
    {
        showChangePasswordModal = false;
        changePasswordDto = new();
    }

    private async Task ChangePassword()
    {
        try
        {
            isChangingPassword = true;
            // Implement password change logic
            ToastService.ShowSuccess("Mot de passe modifié avec succès");
            CloseChangePasswordModal();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors du changement de mot de passe: {ex.Message}");
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private void ShowDeleteAccountModal()
    {
        confirmDelete = false;
        showDeleteAccountModal = true;
    }

    private void CloseDeleteAccountModal()
    {
        showDeleteAccountModal = false;
        confirmDelete = false;
    }

    private async Task DeleteAccount()
    {
        try
        {
            isDeletingAccount = true;
            // Implement account deletion logic
            ToastService.ShowSuccess("Compte supprimé avec succès");
            await UserService.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Erreur lors de la suppression: {ex.Message}");
        }
        finally
        {
            isDeletingAccount = false;
        }
    }

    private void CheckForUpdates()
    {
        ToastService.ShowInfo("Vous utilisez la dernière version de l'application");
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("dd MMMM yyyy", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"));
    }

    private class AppSettings
    {
        public bool EnableNotifications { get; set; }
        public bool DarkMode { get; set; }
        public bool AutoSave { get; set; }
    }
}